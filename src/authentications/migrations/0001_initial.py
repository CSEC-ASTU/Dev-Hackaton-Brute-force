# Generated by Django 3.2.12 on 2022-05-07 14:16

import authentications.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('PRESIDENT', 'President'), ('V_PRESIDENT', 'V President'), ('HEAD', 'Head'), ('SPECIAL_COMMITTEE', 'Special Committee'), ('MEMBER', 'Member')], max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='SocialAccountsLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website', models.CharField(blank=True, default='https://www.csec-astu.tech/?*Defautl*', max_length=200, null=True, verbose_name='Website')),
                ('github', models.CharField(blank=True, default='https://www.github.com/?*Defautl*', max_length=200, null=True, verbose_name='Github')),
                ('twitter', models.CharField(blank=True, default='https://www.twitter./?*Defautl*', max_length=200, null=True, verbose_name='Twitter')),
                ('linkedin', models.CharField(blank=True, default='https://linkedin.com/in/?*Defautl*', max_length=200, null=True, verbose_name='Linkedin')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('student_id', models.CharField(blank=True, max_length=20, null=True)),
                ('division', models.CharField(blank=True, choices=[('cpd', 'Competitive Programming'), ('development', 'Development'), ('capacity', 'Capacity Building'), ('unassigned', 'Unassigned')], default='unassigned', max_length=20, null=True)),
                ('profile', models.ImageField(blank=True, default='users/null.png', null=True, upload_to=authentications.models.user_directory_path, verbose_name='Image')),
                ('phone', models.CharField(blank=True, default='+251900000000', max_length=50, null=True, verbose_name='Phone')),
                ('about', models.TextField(default='', max_length=250, verbose_name='About')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('role', models.ForeignKey(blank=True, default=5, null=True, on_delete=django.db.models.deletion.CASCADE, to='authentications.role', verbose_name='Role')),
                ('socials', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='authentications.socialaccountslinks', verbose_name='SocialAccountsLinks')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
